import streamlit as st
import pandas as pd
import plotly.express as px
import google.generativeai as genai
import json
from datetime import timedelta

# Load data
sales_data = {
    'top1': pd.read_csv('data/sales/top1_item_sales_h1_2025.csv'),
    'top2': pd.read_csv('data/sales/top2_item_sales_h1_2025.csv'),
    'top3': pd.read_csv('data/sales/top3_item_sales_h1_2025.csv'),
    'top4': pd.read_csv('data/sales/top4_item_sales_h1_2025.csv'),
    'top5': pd.read_csv('data/sales/top5_item_sales_h1_2025.csv'),
}

stocks_data = {
    'top1': pd.read_csv('data/stocks/top1_item_stocks_h1_2025.csv'),
    'top2': pd.read_csv('data/stocks/top2_item_stocks_h1_2025.csv'),
    'top3': pd.read_csv('data/stocks/top3_item_stocks_h1_2025.csv'),
    'top4': pd.read_csv('data/stocks/top4_item_stocks_h1_2025.csv'),
    'top5': pd.read_csv('data/stocks/top5_item_stocks_h1_2025.csv'),
}

item_names = {
    'top1': '–°—Ç–∏—Ä–∞–ª—å–Ω–∞—è –º–∞—à–∏–Ω–∞ LG F-2M5HS6S (store_id: jsySHiRm8fJNrz6IubJskA==)',
    'top2': '–ß–∞–π–Ω–∏–∫ Tefal KI-700830 (store_id: gPKQGw4P74wR5sEfXKoQ9g==)',
    'top3': 'AirPods with Charging Case MV7N2RU/A (store_id: mFgAGZmZFE4R4zMCL19vIg==)',
    'top4': 'AirPods with Charging Case MV7N2RU/A (store_id: jsySHiRm8fJNrz6IubJskA==)',
    'top5': 'EarPods with Lightning Connector MMTN2ZMA (store_id: jsySHiRm8fJNrz6IubJskA==)'
}

st.set_page_config(layout="wide")
st.title('üì¶ AIRBA Technodom: Stock-Out Optimization Dashboard')

# Select top item
selected_top = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:", options=list(item_names.keys()), format_func=lambda x: item_names[x])

# Merge sales and stocks
sales_df = sales_data[selected_top].rename(columns={"Quantity": "Sales"})
stocks_df = stocks_data[selected_top].rename(columns={"Quantity": "Stocks"})

merged = pd.merge(sales_df, stocks_df, on=["–î–∞—Ç–∞", "store_id", "item_id"], how="inner")
merged["–î–∞—Ç–∞"] = pd.to_datetime(merged["–î–∞—Ç–∞"])
merged = merged.sort_values("–î–∞—Ç–∞")
merged["Delta"] = merged["Stocks"] - merged["Sales"]

# Plotly line chart with highlighting
fig = px.line(merged, x="–î–∞—Ç–∞", y=["Sales", "Stocks"],
              labels={"value": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", "variable": "–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å"},
              title=f"–ü—Ä–æ–≥–Ω–æ–∑ –ø—Ä–æ–¥–∞–∂ –∏ –æ—Å—Ç–∞—Ç–∫–æ–≤ ‚Äî {item_names[selected_top]}")

merged["critical"] = merged["Delta"] < 0
critical_df = merged[merged["critical"] == True]

fig.add_scatter(x=critical_df["–î–∞—Ç–∞"], y=critical_df["Stocks"],
                mode="markers", marker=dict(color="red", size=8),
                name="Stock < Sales (Œî < 0)")

st.plotly_chart(fig, use_container_width=True)

# Show Delta(t) values
with st.expander("üìâ –ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å—á—ë—Ç –¥–∏—Å–±–∞–ª–∞–Ω—Å–∞ Œî(t)"):
    st.latex(r"\Delta(t) = \text{Stocks}(t + \tau) - \text{Sales}(t)")
    st.latex(r"\text{–¶–µ–ª—å:} \quad \min_{\tau} \, \mathbb{E}[|\Delta(t)|]")
    st.dataframe(merged[["–î–∞—Ç–∞", "Sales", "Stocks", "Delta"]].round(2), use_container_width=True)

# Smart analysis per item
if st.button("üß† Smart Analysis"):
    result_json = {}
    for key in item_names:
        df_sales = sales_data[key].rename(columns={"Quantity": "Sales"})
        df_stocks = stocks_data[key].rename(columns={"Quantity": "Stocks"})
        df = pd.merge(df_sales, df_stocks, on=["–î–∞—Ç–∞", "store_id", "item_id"], how="inner")
        df["–î–∞—Ç–∞"] = pd.to_datetime(df["–î–∞—Ç–∞"])
        df = df.sort_values("–î–∞—Ç–∞")
        df["Delta"] = df["Stocks"] - df["Sales"]

        high_risk = df[df["Delta"] < 0]
        medium_risk = df[(df["Delta"] >= 0) & (df["Delta"] <= 3)]

        def extract_periods(df_period):
            periods = []
            if df_period.empty:
                return periods
            df_period = df_period.sort_values("–î–∞—Ç–∞")
            start = df_period.iloc[0]["–î–∞—Ç–∞"]
            prev = start
            for i in range(1, len(df_period)):
                current = df_period.iloc[i]["–î–∞—Ç–∞"]
                if current - prev > timedelta(days=1):
                    periods.append((start.date(), prev.date()))
                    start = current
                prev = current
            periods.append((start.date(), prev.date()))
            return periods

        if not high_risk.empty:
            risk = "–≤—ã—Å–æ–∫–∏–π"
            high_periods = extract_periods(high_risk)
            desc = f"–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø–µ—Ä–∏–æ–¥—ã, –∫–æ–≥–¥–∞ –ø—Ä–æ–¥–∞–∂–∏ –ø—Ä–µ–≤—ã—à–∞—é—Ç –æ—Å—Ç–∞—Ç–∫–∏: {high_periods}."
        elif not medium_risk.empty:
            risk = "—Å—Ä–µ–¥–Ω–∏–π"
            medium_periods = extract_periods(medium_risk)
            desc = f"–û—Å—Ç–∞—Ç–∫–∏ –±–ª–∏–∑–∫–∏ –∫ –ø—Ä–æ–¥–∞–∂–∞–º (–º–µ–Ω–µ–µ 3 –µ–¥.) –≤ –ø–µ—Ä–∏–æ–¥—ã: {medium_periods}."
        else:
            risk = "–Ω–∏–∑–∫–∏–π"
            desc = "–ó–∞–ø–∞—Å—ã –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–µ–≤—ã—à–∞—é—Ç –ø—Ä–æ–≥–Ω–æ–∑ –ø—Ä–æ–¥–∞–∂. –†–∏—Å–∫–æ–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ."

        result_json[item_names[key]] = {"—Ä–∏—Å–∫": risk, "–æ–ø–∏—Å–∞–Ω–∏–µ": desc}

    st.subheader("üßæ JSON-–∞–Ω–∞–ª–∏–∑")
    st.json(result_json, expanded=False)

    with st.spinner("ü§ñ AI-–∞–Ω–∞–ª–∏–∑ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ..."):
        genai.configure(api_key=st.secrets["GOOGLE_API_KEY"])
        model = genai.GenerativeModel("gemini-2.0-flash")
        prompt = f"""
        –ü—Ä–æ–≤–µ–¥–∏ –∞–Ω–∞–ª–∏–∑ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –ø–æ —Å–ª–µ–¥—É—é—â–µ–º—É JSON, –æ—Ü–µ–Ω–∏ —Ç–æ–≤–∞—Ä—ã —Å —Å–∞–º—ã–º–∏ –≤—ã—Å–æ–∫–∏–º–∏ —Ä–∏—Å–∫–∞–º–∏ –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –∑–∞–ø–∞—Å–æ–≤ —Å –¥–∞—Ç–∞–º–∏ (–∫–æ–≥–¥–∞ –ø—Ä–∏–º–µ—Ä–Ω–æ –Ω—É–∂–Ω–æ –∏—Ö –∑–∞–∫—É–ø–∏—Ç—å), —á—Ç–æ–±—ã –∑–∞–∫—É–ø–∏—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π —Ç–æ–≤–∞—Ä –≤ –Ω—É–∂–Ω–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –∑–∞—Ä–∞–Ω–µ–µ. 
        –¢–∞–∫–∂–µ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã—Ö –∑–∞—Ç—Ä–∞—Ç –Ω–∞ —É–∂–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã, —Å –≤—ã—Å–æ–∫–∏–º–∏ –ø—Ä–æ–¥–∞–∂–∞–º–∏. –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ —É –∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–æ–¥–∞–∂–∏ –Ω–æ—Ä–º–∞–ª—å–Ω—ã–µ, –Ω–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –µ—â—ë –ª—É—á—à–µ. –í—Å–µ —ç—Ç–æ –æ—Ñ–æ—Ä–º–∏ —á–µ—Ç–∫–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ markdown.
        –°–µ–≥–æ–¥–Ω—è—à–Ω—è –¥–∞—Ç–∞: {pd.Timestamp.now().date()}
        –î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:
        {json.dumps(result_json, ensure_ascii=False, indent=2)}
        """
        response = model.generate_content(prompt)
        st.subheader("ü§ñ AI-–∞–Ω–∞–ª–∏–∑ –æ—Ç Gemini")
        st.markdown(response.text)
